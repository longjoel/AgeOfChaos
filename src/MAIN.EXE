# 1 "MAIN.C"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "MAIN.C"
# 19 "MAIN.C"
# 1 "c:/djgpp/include/stdio.h" 1 3
# 14 "c:/djgpp/include/stdio.h" 3

# 14 "c:/djgpp/include/stdio.h" 3
extern "C" {




# 1 "c:/djgpp/include/sys/version.h" 1 3
# 20 "c:/djgpp/include/stdio.h" 2 3
# 1 "c:/djgpp/include/sys/djtypes.h" 1 3
# 43 "c:/djgpp/include/sys/djtypes.h" 3
typedef short __attribute__((__may_alias__)) __dj_short_a;
typedef int __attribute__((__may_alias__)) __dj_int_a;
typedef long __attribute__((__may_alias__)) __dj_long_a;
typedef long long __attribute__((__may_alias__)) __dj_long_long_a;
typedef unsigned short __attribute__((__may_alias__)) __dj_unsigned_short_a;
typedef unsigned int __attribute__((__may_alias__)) __dj_unsigned_int_a;
typedef unsigned long __attribute__((__may_alias__)) __dj_unsigned_long_a;
typedef unsigned long long __attribute__((__may_alias__)) __dj_unsigned_long_long_a;
typedef float __attribute__((__may_alias__)) __dj_float_a;
typedef double __attribute__((__may_alias__)) __dj_double_a;
typedef long double __attribute__((__may_alias__)) __dj_long_double_a;
# 21 "c:/djgpp/include/stdio.h" 2 3
# 48 "c:/djgpp/include/stdio.h" 3
typedef __builtin_va_list va_list;




typedef long unsigned int size_t;




typedef long signed int ssize_t;







typedef struct {
  ssize_t _cnt;
  char *_ptr;
  char *_base;
  size_t _bufsiz;
  int _flag;
  int _file;
  char *_name_to_remove;
  size_t _fillsize;
} FILE;

typedef unsigned long fpos_t;

extern FILE __dj_stdin, __dj_stdout, __dj_stderr;




void clearerr(FILE *_stream);
int fclose(FILE *_stream);
int feof(FILE *_stream);
int ferror(FILE *_stream);
int fflush(FILE *_stream);
int fgetc(FILE *_stream);
int fgetpos(FILE *_stream, fpos_t *_pos);
char * fgets(char *_s, int _n, FILE *_stream);
FILE * fopen(const char *_filename, const char *_mode);
int fprintf(FILE *_stream, const char *_format, ...);
int fputc(int _c, FILE *_stream);
int fputs(const char *_s, FILE *_stream);
size_t fread(void *_ptr, size_t _size, size_t _nelem, FILE *_stream);
FILE * freopen(const char *_filename, const char *_mode, FILE *_stream);
int fscanf(FILE *_stream, const char *_format, ...);
int fseek(FILE *_stream, long _offset, int _mode);
int fsetpos(FILE *_stream, const fpos_t *_pos);
long ftell(FILE *_stream);
size_t fwrite(const void *_ptr, size_t _size, size_t _nelem, FILE *_stream);
int getc(FILE *_stream);
int getchar(void);
char * gets(char *_s);
void perror(const char *_s);
int printf(const char *_format, ...);
int putc(int _c, FILE *_stream);
int putchar(int _c);
int puts(const char *_s);
int remove(const char *_filename);
int rename(const char *_old, const char *_new);
void rewind(FILE *_stream);
int scanf(const char *_format, ...);
void setbuf(FILE *_stream, char *_buf);
int setvbuf(FILE *_stream, char *_buf, int _mode, size_t _size);
int sprintf(char *_s, const char *_format, ...);
int sscanf(const char *_s, const char *_format, ...);
FILE * tmpfile(void);
char * tmpnam(char *_s);
int ungetc(int _c, FILE *_stream);
int vfprintf(FILE *_stream, const char *_format, va_list _ap);
int vprintf(const char *_format, va_list _ap);
int vsprintf(char *_s, const char *_format, va_list _ap);




int snprintf(char *str, size_t n, const char *fmt, ...);
int vfscanf(FILE *_stream, const char *_format, va_list _ap);
int vscanf(const char *_format, va_list _ap);
int vsnprintf(char *str, size_t n, const char *fmt, va_list ap);
int vsscanf(const char *_s, const char *_format, va_list _ap);
# 143 "c:/djgpp/include/stdio.h" 3
int dprintf(int _fd, const char *_format, ...) __attribute__ ((__format__ (__printf__, 2, 3)));
int fileno(FILE *_stream);
FILE * fdopen(int _fildes, const char *_type);
int mkstemp(char *_template);
int pclose(FILE *_pf);
FILE * popen(const char *_command, const char *_mode);
char * tempnam(const char *_dir, const char *_prefix);
int vdprintf(int _fd, const char *_format, va_list _ap) __attribute__ ((__format__ (__printf__, 2, 0)));



extern FILE __dj_stdprn, __dj_stdaux;





void _djstat_describe_lossage(FILE *_to_where);
int _doprnt(const char *_fmt, va_list _args, FILE *_f);
int _doscan(FILE *_f, const char *_fmt, va_list _args);
int _doscan_low(FILE *, int (*)(FILE *_get), int (*_unget)(int, FILE *), const char *_fmt, va_list _args);
int fpurge(FILE *_f);
int getw(FILE *_f);
char * mktemp(char *_template);
int putw(int _v, FILE *_f);
void setbuffer(FILE *_f, void *_buf, int _size);
void setlinebuf(FILE *_f);
int _rename(const char *_old, const char *_new);
int asprintf(char **_sp, const char *_format, ...) __attribute__((format (__printf__, 2, 3)));
char * asnprintf(char *_s, size_t *_np, const char *_format, ...) __attribute__((format (__printf__, 3, 4)));
int vasprintf(char **_sp, const char *_format, va_list _ap) __attribute__((format (__printf__, 2, 0)));
char * vasnprintf(char *_s, size_t *_np, const char *_format, va_list _ap) __attribute__((format (__printf__, 3, 0)));


typedef int off_t;



__extension__ typedef long long off64_t;


int fseeko(FILE *_stream, off_t _offset, int _mode);
off_t ftello(FILE *_stream);
int fseeko64(FILE *_stream, off64_t _offset, int _mode);
off64_t ftello64(FILE *_stream);
# 197 "c:/djgpp/include/stdio.h" 3
}
# 20 "MAIN.C" 2
# 1 "c:/djgpp/include/stdlib.h" 1 3
# 15 "c:/djgpp/include/stdlib.h" 3
extern "C" {
# 37 "c:/djgpp/include/stdlib.h" 3
extern int __dj_mb_cur_max;

typedef struct {
  int quot;
  int rem;
} div_t;

typedef struct {
  long quot;
  long rem;
} ldiv_t;











void abort(void) __attribute__((noreturn));
int abs(int _i);
int atexit(void (*_func)(void));
double atof(const char *_s);
int atoi(const char *_s);
long atol(const char *_s);
void * bsearch(const void *_key, const void *_base, size_t _nelem,
  size_t _size, int (*_cmp)(const void *_ck, const void *_ce));
void * calloc(size_t _nelem, size_t _size);
div_t div(int _numer, int _denom);
void exit(int _status) __attribute__((noreturn));
void free(void *_ptr);
char * getenv(const char *_name);
long labs(long _i);
ldiv_t ldiv(long _numer, long _denom);
void * malloc(size_t _size);
int mblen(const char *_s, size_t _n);
size_t mbstowcs(wchar_t *_wcs, const char *_s, size_t _n);
int mbtowc(wchar_t *_pwc, const char *_s, size_t _n);
void qsort(void *_base, size_t _nelem, size_t _size,
       int (*_cmp)(const void *_e1, const void *_e2));
int rand(void);
void * realloc(void *_ptr, size_t _size);
void srand(unsigned _seed);
double strtod(const char *_s, char **_endptr);
long strtol(const char *_s, char **_endptr, int _base);
unsigned long strtoul(const char *_s, char **_endptr, int _base);
int system(const char *_s);
size_t wcstombs(char *_s, const wchar_t *_wcs, size_t _n);
int wctomb(char *_s, wchar_t _wchar);




typedef struct {
  long long int quot;
  long long int rem;
} lldiv_t;

void _Exit(int _status) __attribute__((noreturn));
long long int atoll(const char *_s);
long long int llabs(long long int _i);
lldiv_t lldiv(long long int _numer, long long int _denom);
float strtof(const char *_s, char **_endptr);
long double strtold(const char *_s, char **_endptr);
long long int strtoll(const char *_s, char **_endptr, int _base);
unsigned long long int strtoull(const char *_s, char **_endptr, int _base);





long a64l(const char *_string);
char * l64a(long _value);
char * mktemp(char *_template);
char * mkdtemp(char *_template);
int mkstemp(char *_template);
int putenv(char *_val);
char * realpath(const char *_path, char *_resolved);
int setenv(const char *_var, const char *_val, int _overwrite);
int unsetenv(const char *_var);



void * alloca(size_t _size);
long double _atold(const char *_s);
void cfree(void *_ptr);
double drand48(void);
char * ecvtbuf(double _val, int _nd, int *_dp, int *_sn, char *_bf);
char * ecvt(double _val, int _nd, int *_dp, int *_sn);
double erand48(unsigned short _state[3]);
char * fcvtbuf(double _val, int _nd, int *_dp, int *_sn, char *_bf);
char * fcvt(double _val, int _nd, int *_dp, int *_sn);
char * gcvt(double _val, int _nd, char *_buf);
char * getpass(const char *_prompt);
int getlongpass(const char *_prompt, char *_buffer, int _max_len);
char * itoa(int _value, char *_buffer, int _radix);
long jrand48(unsigned short _state[3]);
void lcong48(unsigned short _param[7]);
unsigned long lrand48(void);
long mrand48(void);
unsigned long nrand48(unsigned short _state[3]);
unsigned short *seed48(unsigned short _state_seed[3]);
void srand48(long _seedval);
int stackavail(void);
long double _strtold(const char *_s, char **_endptr);
void swab(const void *_from, void *_to, int _nbytes);
void * valloc (size_t _amt);






char * initstate (unsigned _seed, char *_arg_state, int _n);
char * setstate(char *_arg_state);
long random(void);
int srandom(int _seed);
# 174 "c:/djgpp/include/stdlib.h" 3
extern int __system_flags;
# 184 "c:/djgpp/include/stdlib.h" 3
}
# 21 "MAIN.C" 2
# 1 "c:/djgpp/include/dos.h" 1 3
# 22 "c:/djgpp/include/dos.h" 3
# 1 "c:/djgpp/include/pc.h" 1 3
# 11 "c:/djgpp/include/pc.h" 3
extern "C" {
# 25 "c:/djgpp/include/pc.h" 3
unsigned char inportb (unsigned short _port);
unsigned short inportw (unsigned short _port);
unsigned long inportl (unsigned short _port);
void inportsb (unsigned short _port, unsigned char *_buf, unsigned _len);
void inportsw (unsigned short _port, unsigned short *_buf, unsigned _len);
void inportsl (unsigned short _port, unsigned long *_buf, unsigned _len);
void outportb (unsigned short _port, unsigned char _data);
void outportw (unsigned short _port, unsigned short _data);
void outportl (unsigned short _port, unsigned long _data);
void outportsb(unsigned short _port, const unsigned char *_buf, unsigned _len);
void outportsw(unsigned short _port, const unsigned short *_buf, unsigned _len);
void outportsl(unsigned short _port, const unsigned long *_buf, unsigned _len);

unsigned char inp(unsigned short _port);
unsigned short inpw(unsigned short _port);
void outp(unsigned short _port, unsigned char _data);
void outpw(unsigned short _port, unsigned short _data);

int kbhit(void);

int getkey(void);
int getxkey(void);
const unsigned char * __get_extended_key_string(int _xkey_code);
void sound(int _frequency);



extern unsigned char ScreenAttrib;




int ScreenMode(void);
int ScreenRows(void);
int ScreenCols(void);
void ScreenPutChar(int _ch, int _attr, int _x, int _y);
void ScreenGetChar(int *_ch, int *_attr, int _x, int _y);
void ScreenPutString(const char *_ch, int _attr, int _x, int _y);
void ScreenSetCursor(int _row, int _col);
void ScreenGetCursor(int *_row, int *_col);
void ScreenClear(void);
void ScreenUpdate(const void *_virtual_screen);
void ScreenUpdateLine(const void *_virtual_screen_line, int _row);
void ScreenRetrieve(void *_virtual_screen);
void ScreenVisualBell(void);







# 1 "c:/djgpp/include/inlines/pc.h" 1 3







extern "C" {


# 1 "c:/djgpp/include/sys/cdefs.h" 1 3
# 12 "c:/djgpp/include/inlines/pc.h" 2 3

extern __inline__ __attribute__ ((__gnu_inline__)) unsigned char
inportb (unsigned short _port)
{
  unsigned char rv;
  __asm__ __volatile__ ("inb %1, %0"
   : "=a" (rv)
   : "dN" (_port));
  return rv;
}

extern __inline__ __attribute__ ((__gnu_inline__)) unsigned short
inportw (unsigned short _port)
{
  unsigned short rv;
  __asm__ __volatile__ ("inw %1, %0"
   : "=a" (rv)
   : "dN" (_port));
  return rv;
}

extern __inline__ __attribute__ ((__gnu_inline__)) unsigned long
inportl (unsigned short _port)
{
  unsigned long rv;
  __asm__ __volatile__ ("inl %1, %0"
   : "=a" (rv)
   : "dN" (_port));
  return rv;
}

extern __inline__ __attribute__ ((__gnu_inline__)) void
outportb (unsigned short _port, unsigned char _data)
{
  __asm__ __volatile__ ("outb %1, %0"
   :
   : "dN" (_port),
     "a" (_data));
}

extern __inline__ __attribute__ ((__gnu_inline__)) void
outportw (unsigned short _port, unsigned short _data)
{
  __asm__ __volatile__ ("outw %1, %0"
   :
   : "dN" (_port),
     "a" (_data));
}

extern __inline__ __attribute__ ((__gnu_inline__)) void
outportl (unsigned short _port, unsigned long _data)
{
  __asm__ __volatile__ ("outl %1, %0"
   :
   : "dN" (_port),
     "a" (_data));
}


}
# 78 "c:/djgpp/include/pc.h" 2 3




}
# 23 "c:/djgpp/include/dos.h" 2 3

extern int _8087;

int _detect_80387(void);

struct DWORDREGS {
  unsigned long edi;
  unsigned long esi;
  unsigned long ebp;
  unsigned long cflag;
  unsigned long ebx;
  unsigned long edx;
  unsigned long ecx;
  unsigned long eax;
  unsigned short eflags;
};

struct DWORDREGS_W {
  unsigned long di;
  unsigned long si;
  unsigned long bp;
  unsigned long cflag;
  unsigned long bx;
  unsigned long dx;
  unsigned long cx;
  unsigned long ax;
  unsigned short flags;
};

struct WORDREGS {
  unsigned short di, _upper_di;
  unsigned short si, _upper_si;
  unsigned short bp, _upper_bp;
  unsigned short cflag, _upper_cflag;
  unsigned short bx, _upper_bx;
  unsigned short dx, _upper_dx;
  unsigned short cx, _upper_cx;
  unsigned short ax, _upper_ax;
  unsigned short flags;
};

struct BYTEREGS {
  unsigned short di, _upper_di;
  unsigned short si, _upper_si;
  unsigned short bp, _upper_bp;
  unsigned long cflag;
  unsigned char bl;
  unsigned char bh;
  unsigned short _upper_bx;
  unsigned char dl;
  unsigned char dh;
  unsigned short _upper_dx;
  unsigned char cl;
  unsigned char ch;
  unsigned short _upper_cx;
  unsigned char al;
  unsigned char ah;
  unsigned short _upper_ax;
  unsigned short flags;
};

union REGS {
  struct DWORDREGS d;






  struct DWORDREGS_W x;


  struct WORDREGS w;
  struct BYTEREGS h;
};

struct SREGS {
  unsigned short es;
  unsigned short ds;
  unsigned short fs;
  unsigned short gs;
  unsigned short cs;
  unsigned short ss;
};

struct ftime {
  unsigned ft_tsec:5;
  unsigned ft_min:6;
  unsigned ft_hour:5;
  unsigned ft_day:5;
  unsigned ft_month:4;
  unsigned ft_year:7;
};

struct date {
  short da_year;
  char da_day;
  char da_mon;
};

struct time {
  unsigned char ti_min;
  unsigned char ti_hour;
  unsigned char ti_hund;
  unsigned char ti_sec;
};

struct dfree {
  unsigned df_avail;
  unsigned df_total;
  unsigned df_bsec;
  unsigned df_sclus;
};


extern "C" {


extern unsigned short _osmajor, _osminor;
extern unsigned short _os_trueversion;
extern const char * _os_flavor;
extern int _doserrno;

unsigned short _get_dos_version(int);

int _get_fat_size(const int _drive);
int _get_fs_type(const int _drive, char *const _result_str);
int _is_cdrom_drive(const int _drive);
int _is_fat32(const int _drive);
int _is_ram_drive(const int _drive);
int _media_type(const int _drive);

int int86(int _ivec, union REGS *in, union REGS *out);
int int86x(int _ivec, union REGS *_in, union REGS *_out, struct SREGS *_seg);
int intdos(union REGS *_in, union REGS *_out);
int intdosx(union REGS *_in, union REGS *_out, struct SREGS *_seg);
int bdos(int _func, unsigned _dx, unsigned _al);
int bdosptr(int _func, void *_dx, unsigned _al);





int enable(void);
int disable(void);

int getftime(int _handle, struct ftime *_ftimep);
int setftime(int _handle, struct ftime *_ftimep);

int getcbrk(void);
int setcbrk(int _new_value);

void getdate(struct date *);
void gettime(struct time *);
void setdate(struct date *);
void settime(struct time *);

void getdfree(unsigned char _drive, struct dfree *_ptr);

void delay(unsigned _msec);

void __maybe_fix_w2k_ntvdm_bug(void);
# 202 "c:/djgpp/include/dos.h" 3
struct _dosdate_t {
  unsigned char day;
  unsigned char month;
  unsigned short year;
  unsigned char dayofweek;
};


struct _dostime_t {
  unsigned char hour;
  unsigned char minute;
  unsigned char second;
  unsigned char hsecond;
};


struct _find_t {
  char reserved[21];
  unsigned char attrib;
  unsigned short wr_time;
  unsigned short wr_date;
  unsigned long size;
  char name[256];
} __attribute__((packed));


typedef int _DJCHK_FIND_T[(sizeof(struct _find_t)==286)*3 - 1];

struct _diskfree_t {
  unsigned short total_clusters;
  unsigned short avail_clusters;
  unsigned short sectors_per_cluster;
  unsigned short bytes_per_sector;
};


struct _DOSERROR {
  int exterror;

  char errclass;



  char action;
  char locus;
};


struct _DOSERROR_STR {
  char *exterror_str;

  char *errclass_str;



  char *action_str;
  char *locus_str;
};


unsigned int _dos_creat(const char *_filename, unsigned int _attr, int *_handle);
unsigned int _dos_creatnew(const char *_filename, unsigned int _attr, int *_handle);
unsigned int _dos_open(const char *_filename, unsigned int _mode, int *_handle);
unsigned int _dos_write(int _handle, const void *_buffer, unsigned int _count, unsigned int *_result);
unsigned int _dos_read(int _handle, void *_buffer, unsigned int _count, unsigned int *_result);
unsigned int _dos_close(int _handle);
unsigned int _dos_commit(int _handle);

unsigned int _dos_findfirst(const char *_name, unsigned int _attr, struct _find_t *_result);
unsigned int _dos_findnext(struct _find_t *_result);

void _dos_getdate(struct _dosdate_t *_date);
unsigned int _dos_setdate(struct _dosdate_t *_date);
void _dos_gettime(struct _dostime_t *_time);
unsigned int _dos_settime(struct _dostime_t *_time);

unsigned int _dos_getftime(int _handle, unsigned int *_p_date, unsigned int *_p_time);
unsigned int _dos_setftime(int _handle, unsigned int _date, unsigned int _time);
unsigned int _dos_getfileattr(const char *_filename, unsigned int *_p_attr);
unsigned int _dos_setfileattr(const char *_filename, unsigned int _attr);

void _dos_getdrive(unsigned int *_p_drive);
void _dos_setdrive(unsigned int _drive, unsigned int *_p_drives);
unsigned int _dos_getdiskfree(unsigned int _drive, struct _diskfree_t *_diskspace);

int _dosexterr(struct _DOSERROR *_p_error);

int _dostrerr(struct _DOSERROR *_p_error, struct _DOSERROR_STR *_p_str);






}
# 22 "MAIN.C" 2
# 1 "c:/djgpp/include/sys/nearptr.h" 1 3







extern "C" {
# 26 "c:/djgpp/include/sys/nearptr.h" 3
int __djgpp_nearptr_enable(void);
void __djgpp_nearptr_disable(void);
extern int __djgpp_selector_limit;
extern int __djgpp_base_address;
# 41 "c:/djgpp/include/sys/nearptr.h" 3
}
# 23 "MAIN.C" 2
# 34 "MAIN.C"

# 34 "MAIN.C"
typedef unsigned char byte;
typedef unsigned short word;


byte *VGA = (byte *)0xA0000;
word *my_clock = (word *)0x046C;







void set_mode(byte mode)
{
  union REGS regs;

  regs.h.ah = 0x00;
  regs.h.al = mode;
  int86(0x10, &regs, &regs);
}






void plot_pixel_slow(int x,int y,byte color)
{
  union REGS regs;

  regs.h.ah = 0x0C;
  regs.h.al = color;
  regs.x.cx = x;
  regs.x.dx = y;
  int86(0x10, &regs, &regs);
}






void plot_pixel_fast(int x,int y,byte color)
{
  VGA[y*320 +x]=color;
}







void main()
{
  int x,y,color;
  float t1,t2;
  word i,start;

  if (__djgpp_nearptr_enable() == 0)
  {
    printf("Could get access to first 640K of memory.\n");
    exit(-1);
  }

  VGA+=
# 100 "MAIN.C" 3
      (-__djgpp_base_address)
# 100 "MAIN.C"
                               ;
  my_clock = (void *)my_clock + 
# 101 "MAIN.C" 3
                               (-__djgpp_base_address)
# 101 "MAIN.C"
                                                        ;

  srand(*my_clock);
  set_mode(0x13);

  start=*my_clock;
  for(i=0;i<50000L;i++)
  {
    x=rand()%320;
    y=rand()%200;
    color=rand()%256;
    plot_pixel_slow(x,y,color);
  }

  t1=(*my_clock-start)/18.2;

  set_mode(0x13);


  start=*my_clock;
  for(i=0;i<50000L;i++)
  {
    x=rand()%320;
    y=rand()%200;
    color=rand()%256;
    plot_pixel_fast(x,y,color);
  }

  t2=(*my_clock-start)/18.2;
  set_mode(0x03);



  printf("Slow pixel plotting took %f seconds.\n",t1);
  printf("Fast pixel plotting took %f seconds.\n",t2);
  if (t2 != 0) printf("Fast pixel plotting was %f times faster.\n",t1/t2);

  __djgpp_nearptr_disable();

  return;
}
